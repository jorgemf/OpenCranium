package opencranium.data;

import java.util.Collection;

import opencranium.cognitive.attention.Context;
import opencranium.cranium.Processable;

/**
 * Perceptual information.
 * 
 * @author Jorge Muñoz
 * @author Raúl Arrabales
 */
public interface Percept extends Processable {

	/**
	 * Nature of the percept. It could be a unknown nature, a real nature when
	 * the percept is created in the sensors, an expectation if the percept is
	 * created as an expectation or invented if it is retrieved from the memory.
	 * 
	 * @author Jorge Muñoz
	 * @author Raúl Arrabales
	 */
	public enum Nature {

		/**
		 * Unknown nature of the percept, do not use this value unless it does
		 * not match with the other natures.
		 */
		UNKNOWN,

		/**
		 * Real nature, when the percept is create in te sensors as perceptual
		 * information of the world.
		 */
		REAL,

		/**
		 * An expectation, when the percept is created internally as something
		 * that it is expected to happen in the future.
		 */
		EXPECTATION,

		/**
		 * An invented percept, normally to complete information of the world
		 * with the past experience.
		 */
		INVENTED
	};

	/**
	 * Source that generated this percept. It could be an unknown source, an
	 * exteroceptive sensor when is something perceived from the world, a
	 * proprioceptive sensor when it is something related with the internal
	 * state of the agent, a physical processor if it was a processor in the
	 * physical layer, a mission processor, or a cognitive function when it was
	 * generated in a cognitive function.
	 * 
	 * @author Jorge Muñoz
	 * @author Raúl Arrabales
	 */
	public enum Source {

		/**
		 * Unknown source of the percept, do not use this value unless it does
		 * not match with the other sources.
		 */
		UNKNOWN,

		/**
		 * Exteroceptive sensor, when is something perceived from the world.
		 */
		EXTEROCEPTIVE_SENSOR,

		/**
		 * Proprioceptive sensor, when it is something related with the internal
		 * state of the agent
		 */
		PROPRIOCEPTIVE_SENSOR,

		/**
		 * Physical processor when it was generated by a processor in the
		 * physical layer.
		 */
		PHYSICAL_PROCESSOR,

		/**
		 * Mission processor when it was generated by a processor in the mission
		 * layer.
		 */
		MISSION_PROCESSOR,

		/**
		 * Cognitive function when it was generated in a cognitive function.
		 */
		COGNITIVE_FUNCTION
	};

	/**
	 * The memory type of the percept, it could be unknown, short term memory
	 * when it is something with a short life time, long term memory when it has
	 * a longer life time and episodic if it was retrieved from the episodic
	 * memory.
	 * 
	 * @author Jorge Muñoz
	 * @author Raúl Arrabales
	 */
	public enum MemoryType {

		/**
		 * Unknown memory type of the percept, do not use this value unless it
		 * does not match with the other memorys' types.
		 */
		UNKNOWN,

		/**
		 * Percept with short life time.
		 */
		SHORT_TERM,

		/**
		 * Percept with long life time.
		 */
		LONG_TERM,

		/**
		 * Percept retrieved from the episodic memory.
		 */
		EPISODIC
	};

	/**
	 * Type of the percept, it can be a single percept with atomic information,
	 * a complex percept generated through other percepts or mission percept if
	 * it is generated in the mission layer.
	 * 
	 * @author Jorge Muñoz
	 * @author Raúl Arrabales
	 */
	public enum Type {

		/**
		 * Single percept with the most basic information, atomic information.
		 */
		SINGLE_PERCEPT,

		/**
		 * Complex percept generated from singles percepts and other complex
		 * percept. More abstract information than complex percepts.
		 */
		COMPLEX_PERCEPT,

		/**
		 * Mission percepts generated in the mission layer.
		 */
		MISSION_PERCEPT
	};

	/**
	 * Type of appraisal of the percept, it could be unknown, novelty is if it
	 * something new generated, match when it is something expected and
	 * missmatch when it is something unexpected.
	 * 
	 * @author Jorge Muñoz
	 * @author Raúl Arrabales
	 */
	public enum AppraisalType {

		/**
		 * Unknown appraisal type of the percept, do not use this value unless
		 * it does not match with the other appraisals' types.
		 */
		UNKNOWN,

		/**
		 * Novelty percept, something new sensed.
		 */
		NOVELTY,

		/**
		 * A match percept, something sensed that matches with an expectation.
		 */
		MATCH,

		/**
		 * A missmatch percept, something sensed that does not match with an
		 * expectation.
		 */
		MISSMATCH
	};

	/**
	 * Checks if this percet is an updated version of other percet, that is, if
	 * both are the same perceptual information but the other percept is more
	 * recently and has updated information.
	 * 
	 * @param percept
	 *            The other percet.
	 * @return true if this percept is an updated version of the other.
	 */
	public boolean isAnUpdatedPercept(Percept percept);

	/**
	 * Calculates the similarity of this percept with another one. The method
	 * uses the cosine distance. The resulting similarity ranges from −1 meaning
	 * exactly opposite, to 1 meaning exactly the same, with 0 usually
	 * indicating independence, and in-between values indicating intermediate
	 * similarity or dissimilarity. This method calls
	 * PerceptDescription.similarity(PerceptDescription).
	 * 
	 * @param other
	 *            Other percept.
	 * @return a value between -1 and 1. −1 means exactly opposite, 1 means
	 *         exactly the same and 0 indicates independence.
	 * @see PerceptDescription#similarity(PerceptDescription)
	 */
	public float similarity(Percept other);

	/**
	 * @return The confidence of the percet.
	 * @see Confidence
	 */
	public Confidence getConfidence();

	/**
	 * @return The nature of the percet.
	 * @see Nature
	 */
	public Nature getNature();

	/**
	 * Sets the nature of this percept.
	 * 
	 * @param nature
	 *            The nature of the percept.
	 * @throws IllegalAccessError
	 *             Throwed when this percept has a previously assigned Nature.
	 */
	public void setNature(Nature nature) throws IllegalAccessError;

	/**
	 * @return The source type of the percet.
	 * @see Source
	 */
	public Source getSource();

	/**
	 * Sets the source of this percept.
	 * 
	 * @param source
	 *            The source of the percept.
	 * @throws IllegalAccessError
	 *             Throwed when this percept has a previously assigned Source.
	 */
	public void setSource(Source source) throws IllegalAccessError;

	/**
	 * @return The memory type of the percet.
	 * @see MemoryType
	 */
	public MemoryType getMemoryType();

	/**
	 * 
	 * Sets the memory type of this percept.
	 * 
	 * @param memoryType
	 *            The memory type of the percept.
	 * @throws IllegalAccessError
	 *             Throwed when this percept has a previously assigned memory
	 *             type.
	 */
	public void setMemoryType(MemoryType memoryType) throws IllegalAccessError;

	/**
	 * @return The appraisal type of the percet.
	 * @see AppraisalType
	 */
	public AppraisalType getAppraisalType();

	/**
	 * 
	 * Sets the appraisal type of this percept.
	 * 
	 * @param appraisalType
	 *            The appraisal type of the percept.
	 * @throws IllegalAccessError
	 *             Throwed when this percept has a previously assigned appraisal
	 *             type.
	 */
	public void setAppraisalType(AppraisalType appraisalType) throws IllegalAccessError;

	/**
	 * @return The type of the percet.
	 * @see Type
	 */
	public Type getType();

	/**
	 * @return The context of the percept.
	 */
	public Collection<Context> getContext();

	/**
	 * @return The percet's description.
	 */
	public PerceptDescription getDescription();

}